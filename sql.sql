CREATE DATABASE if not exists bike_store;
use bike_store;


/*1 Retrieve all brand names and their respective product counts*/
select brands.brand_name,count(products.product_name) as counts from brands
join products on brands.brand_id = products.brand_id
group by brands.brand_name 
order by counts desc;

/*2 Find the total number of orders placed by each customer. */
select concat(first_name,' ',customers.last_name) as name,count(orders.order_id) as total from customers
join orders on customers.customer_id = orders.customer_id
group by name
order by total desc;

/*3 List all products with their corresponding brand and category names. */

select brands.brand_name,products.product_name from products
join brands on products.brand_id = brands.brand_id
group by brands.brand_name,products.product_name
order by brands.brand_name ;

/*4  Retrieve the top 5 customers who have spent the most money (based on total order amounts).*/

select concat(c.first_name,' ',c.last_name) as names ,round(sum(order_items.quantity * order_items.list_price *(1-order_items.discount)),2) as total_spent from customers c
left join orders on c.customer_id = orders.customer_id
left join order_items on  orders.order_id = order_items.order_id
group by names
order by total_spent desc
limit 5;

/* Find all products that are out of stock (quantity = 0) in all stores. */

select p.product_name,stores.store_name ,stocks.quantity from products p 
left join stocks on p.product_id = stocks.product_id
join stores on stocks.store_id = stores.store_id
where stocks.quantity = 0;

SELECT p.product_name, s.store_name
FROM products p
CROSS JOIN stores s
LEFT JOIN stocks st ON s.store_id = st.store_id AND p.product_id = st.product_id
WHERE st.quantity = 0;

/* Calculate the average order processing time (in days) for each store. */ 

SELECT s.store_id, s.store_name, AVG(DATEDIFF(o.shipped_date, o.order_date))
 AS avg_processing_time_days
FROM stores s
LEFT JOIN orders o ON s.store_id = o.store_id
WHERE o.shipped_date IS NOT NULL
GROUP BY s.store_id, s.store_name;
-- -------------------------------------------------------------------
SELECT 
    stores.store_id,
    stores.store_name,
    AVG(DATEDIFF(orders.shipped_date, orders.order_date)) AS avg_processing_time_days
FROM
    stores
        LEFT JOIN
    orders ON stores.store_id = orders.store_id
WHERE
    orders.shipped_date IS NOT NULL
GROUP BY stores.store_id , stores.store_name;


/*7 List all customers who have not placed any orders yet. */

select first_name, last_name from customers
where customer_id not in  (
select customer_id from orders);
-- ---------------------------------------------------------
SELECT c.customer_id, CONCAT(c.first_name, ' ', c.last_name) AS customer_name
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;

/*8 Find the brand with the highest average product price. */
select b.brand_name,avg(p.list_price) as avg_price from products p
join brands b on p.brand_id = b.brand_id
group by b.brand_name
order by avg_price desc
limit 1;

/*9 Retrieve all orders where the order date is the same as the required date. */
select date(order_date) from orders
where date(order_date) = date(required_date);

/*10  Find the customers who have spent more than $1000 in total.*/

select concat(customers.first_name,' ',customers.last_name) as f_name, sum(ot.quantity *ot.list_price * (1-ot.discount)) as total from order_items ot
join orders o on ot.order_id = o.order_id
left join customers on o.customer_id = customers.customer_id
group by f_name
having total > 1000
order by total desc;

/*11 List all products that belong to categories with fewer than 10 products. */

/*12 Retrieve the top 3 best-selling products (by total quantity sold) */

SELECT 
    products.product_name, SUM(order_items.quantity) AS total
FROM
    products
        JOIN
    order_items ON products.product_id = order_items.product_id
GROUP BY products.product_name
ORDER BY total DESC
LIMIT 3;

/*13 Calculate the total revenue generated by each store. */
select stores.store_name, sum(order_items.quantity * order_items.list_price * (1-order_items.discount)) as total_rev from stores
join orders on stores.store_id = orders.store_id
join order_items on order_items.order_id = orders.order_id
group by stores.store_name;


/*14 Find all customers who have ordered from more than one store. */
select c.first_name,count(distinct(o.order_id)) as total from customers c
join orders o on c.customer_id = o.customer_id
join stores s on o.store_id = s.store_id 
group by c.first_name
having total > 1;

/*15 List all orders where the quantity of items ordered exceeds the available stock quantity. */

SELECT o.order_id, oi.item_id, oi.product_id, oi.quantity AS ordered_quantity, st.quantity AS available_quantity
FROM orders o
INNER JOIN order_items oi ON o.order_id = oi.order_id
INNER JOIN stocks st ON oi.product_id = st.product_id
WHERE oi.quantity > st.quantity;

/*16 Retrieve the staff members who have processed the highest number of orders. */
SELECT staffs.staff_id,staffs.first_name,count(orders.order_id) as count from orders
join staffs on orders.staff_id = staffs.staff_id
group by staffs.staff_id,staffs.first_name
order by count desc;

/*17 Find the categories where the average product price is above $500 */
 select c.category_name  from products p
 join categories c on p.category_id = c.category_id
 group by c.category_name
 having avg(p.list_price) > 500;
 
 /*18 Calculate the total number of orders placed in each month of the current year. */ 
 select monthname(order_date) ,count(*) as total from orders
 where year(order_date) = 2016 -- year(current_date())
 group by monthname(order_date)
 order by total desc;


 /*19 List all products that have never been ordered. */
 
SELECT p.product_id, p.product_name
FROM products p
LEFT JOIN order_items oi ON p.product_id = oi.product_id
WHERE oi.order_id IS NULL;

/*20 Find the stores where the total revenue is below the average revenue across all stores. */

with store as
(select 
	s.store_id,
    s.store_name,
    sum(ot.quantity * ot.list_price * (1-ot.discount)) as total_rev,
    avg(sum(ot.quantity * ot.list_price * (1-ot.discount)))  over() as avg_rev
    
from stores s
join orders o on s.store_id = o.store_id
join order_items ot on ot.order_id = o.order_id
group by s.store_id,s.store_name
) 

select store_id , store_name, total_rev
from store
where total_rev < avg_rev;


/*21  List all customers who have never placed an order.*/
select * from customers c
left join orders o on c.customer_id = o.customer_id
where o.customer_id is null;

/*22 find the number of products in each category. */

select c.category_name,count(p.product_id) as total from products p
left join categories c on p.category_id = c.category_id
group by c.category_name;


/*23 List the details of orders that have been shipped more than 10 days after the order date.*/
select order_id,order_date,shipped_date, datediff(shipped_date,order_date) from orders
where datediff(shipped_date,order_date) >2;


/*23 List the products along with the total quantity ordered, sorted by the most ordered product. */
select p.product_name,sum(o.quantity) as total  from order_items o
join products p on o.product_id = p.product_id
group by  p.product_name;

/*24  Find the average number of items per order.*/
 select avg(items) from 
 (select count(*)  as items from order_items
group by order_id) t;

/*25 List the stores that have at least one product with a stock quantity below 10 */

select distinct stores.store_id,stores.store_name from stores 
join stocks on stores.store_id = stocks.store_id
where stocks.quantity < 10;

/*26 Retrieve the customer information along with their most recent order date. */
select concat(c.first_name,' ',c.last_name) as f_name, max(o.order_date) as last_order_day from customers c
join orders o on c.customer_id = o.customer_id
group by  f_name;

/*27  Find the total revenue generated by each store. */
select stores.store_name, sum(ot.quantity * ot.list_price * (1-ot.discount)) as total_rev from stores
join  orders on stores.store_id = orders.store_id
join order_items ot on ot.order_id = orders.order_id
group by stores.store_name;


/*28  Find the most popular brand based on the number of products sold.*/ 

select b.brand_name, sum(ot.quantity) as total from brands b
join products p on b.brand_id = p.brand_id
join order_items ot on ot.product_id = p.product_id
group by b.brand_name
order by total desc
limit 5;

/*29  List all the products along with their current stock in each store. */
select p.product_name,s.quantity,st.store_name from products p 
join stocks s on p.product_id = s.product_id
join stores st on st.store_id = s.store_id;

/*30 List all orders with a column showing the order status as
 'Delayed' if the shipped date is after the required date.*/
 
 select order_id,order_date,shipped_date,
	case 
		when shipped_date > required_date then 'Delayed'
        else 'on time'
    end as shipping_status
 
 from orders ;
 
 /*31 List all customers with a column indicating whether they have placed an order or not. */
 select c.customer_id,concat(c.first_name,' ',c.last_name) as f_name, 
 case
	when o.order_id is not null then 'yes'
    else 'no'
 end as order_placed
 from customers c
 left join orders o on c.customer_id= o.customer_id;
 
 /*32  Retrieve all products with a column indicating if the list price is 
 above or below the average list price.*/
 
select product_name,list_price,
case
	when (select avg(list_price) from products) > list_price then 'below average'
    else 'above average'
end as price_category

 from products;
 /*33 Retrieve all order items with a column 
 indicating if the discount is greater than 10%. */
 
 SELECT 
    order_items.order_id,
    products.product_name,
    CASE
        WHEN (order_items.discount * 100) < 10 THEN 'Low discount'
        ELSE 'High discount'
    END AS discount_category
FROM
    order_items
        JOIN
    products ON products.product_id = order_items.product_id;
 
 /*34 List all products with a column showing 'In Stock' 
 if the stock quantity is greater than zero in any store.*/ 
 
 SELECT p.product_id, p.product_name,
       CASE
           WHEN EXISTS (SELECT 1 FROM stocks s WHERE s.product_id = p.product_id AND s.quantity > 0) THEN 'In Stock'
           ELSE 'Out of Stock'
       END AS stock_status
FROM products p;

/*35 Retrieve all stores with a column indicating whether they are located 
in 'Urban' or 'Rural' areas based on the state.*/

SELECT 
    store_id,
    store_name,
    city,
    state,
    CASE
        WHEN state IN ('NY' , 'CA') THEN 'Urban'
        ELSE 'Rural'
    END AS area_type
FROM
    stores;

/*36  List all customers with a column showing 'VIP' if they have placed more than 2 orders.*/
select 
	customer_id,concat(first_name,' ',last_name) as f_name,
    case
		when (select count(*) from orders where orders.customer_id = customers.customer_id) > 2 then 'Vip'
        else 'Regular'
	end as customer_type
from customers;

/*37 Retrieve all products with a column indicating if they belong to 
a 'Premium' or 'Standard' brand based on brand name.*/

SELECT p.product_id, p.product_name, b.brand_name,
       CASE
           WHEN b.brand_name IN ('Electra', 'Trek') THEN 'Premium'
           ELSE 'Standard'
       END AS brand_category
FROM products p
JOIN brands b ON p.brand_id = b.brand_id;

/*38 List all orders with a column showing 'Large' or 'Small' 
based on the total quantity of items. */

select o.order_id,sum(oi.quantity)as total_quantity,
	case
		when sum(oi.quantity) > 4 then 'Large'
        else 'Small'
	end as order_size
    
from orders o 
join order_items oi on o.order_id = oi.order_id
group by o.order_id; 

/*40 Retrieve all orders with a column indicating 
whether the order has more than 4 different products.*/
SELECT 
    o.order_id,count(distinct(oi.product_id)) as product_count,
    case
		when count(distinct(oi.product_id)) > 4 then 'many'
        else 'Few Products'
	end as product_diversity
FROM
    order_items oi
        JOIN
    orders o ON oi.order_id = o.order_id
group by order_id;


/* 39 List the average list price of products by category*/
 with avgpricecategory as (
 select category_id,round(avg(list_price),2) as avg_price from products
 group by category_id)

select c.category_name,avgpricecategory.avg_price from avgpricecategory
join categories c on c.category_id = avgpricecategory.category_id
