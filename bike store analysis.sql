
use bike_store;


/*1 all brand names and their respective product counts*/
SELECT 
    brands.brand_name, COUNT(products.product_name) AS counts
FROM
    brands
        JOIN
    products ON brands.brand_id = products.brand_id
GROUP BY brands.brand_name
ORDER BY counts DESC;

/*2 the total number of orders placed by each customer. */

SELECT 
    CONCAT(first_name, ' ', customers.last_name) AS name,
    COUNT(orders.order_id) AS total
FROM
    customers
        JOIN
    orders ON customers.customer_id = orders.customer_id
GROUP BY name
ORDER BY total DESC;

/*3 all products with their corresponding brand and category names. */

SELECT 
    brands.brand_name, products.product_name
FROM
    products
        JOIN
    brands ON products.brand_id = brands.brand_id
GROUP BY brands.brand_name , products.product_name
ORDER BY brands.brand_name;

/*4  the top 5 customers who have spent the most money (based on total order amounts).*/

SELECT 
    CONCAT(c.first_name, ' ', c.last_name) AS names,
    ROUND(SUM(order_items.quantity * order_items.list_price * (1 - order_items.discount)),
            2) AS total_spent
FROM
    customers c
        LEFT JOIN
    orders ON c.customer_id = orders.customer_id
        LEFT JOIN
    order_items ON orders.order_id = order_items.order_id
GROUP BY names
ORDER BY total_spent DESC
LIMIT 5;

/*5 all products that are out of stock (quantity = 0) in all stores. */

SELECT 
    p.product_name, stores.store_name, stocks.quantity
FROM
    products p
        LEFT JOIN
    stocks ON p.product_id = stocks.product_id
        JOIN
    stores ON stocks.store_id = stores.store_id
WHERE
    stocks.quantity = 0;

SELECT 
    p.product_name, s.store_name
FROM
    products p
        CROSS JOIN
    stores s
        LEFT JOIN
    stocks st ON s.store_id = st.store_id
        AND p.product_id = st.product_id
WHERE
    st.quantity = 0;

/*6 The average order processing time (in days) for each store. */ 

SELECT 
    s.store_id,
    s.store_name,
    AVG(DATEDIFF(o.shipped_date, o.order_date)) AS avg_processing_time_days
FROM
    stores s
        LEFT JOIN
    orders o ON s.store_id = o.store_id
WHERE
    o.shipped_date IS NOT NULL
GROUP BY s.store_id , s.store_name;
-- -------------------------------------------------------------------
SELECT 
    stores.store_id,
    stores.store_name,
    AVG(DATEDIFF(orders.shipped_date, orders.order_date)) AS avg_processing_time_days
FROM
    stores
        LEFT JOIN
    orders ON stores.store_id = orders.store_id
WHERE
    orders.shipped_date IS NOT NULL
GROUP BY stores.store_id , stores.store_name;


/*7 all customers who have not placed any orders yet. */

SELECT 
    first_name, last_name
FROM
    customers
WHERE
    customer_id NOT IN (SELECT 
            customer_id
        FROM
            orders);
-- ---------------------------------------------------------
SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name
FROM
    customers c
        LEFT JOIN
    orders o ON c.customer_id = o.customer_id
WHERE
    o.order_id IS NULL;

/*8 Find the brand with the highest average product price. */

SELECT 
    b.brand_name, AVG(p.list_price) AS avg_price
FROM
    products p
        JOIN
    brands b ON p.brand_id = b.brand_id
GROUP BY b.brand_name
ORDER BY avg_price DESC
LIMIT 1;

/*9 all orders where the order date is the same as the required date. */

SELECT 
    DATE(order_date)
FROM
    orders
WHERE
    DATE(order_date) = DATE(required_date);

/*10  Find the customers who have spent more than $1000 in total.*/

SELECT 
    CONCAT(customers.first_name,
            ' ',
            customers.last_name) AS f_name,
    SUM(ot.quantity * ot.list_price * (1 - ot.discount)) AS total
FROM
    order_items ot
        JOIN
    orders o ON ot.order_id = o.order_id
        LEFT JOIN
    customers ON o.customer_id = customers.customer_id
GROUP BY f_name
HAVING total > 1000
ORDER BY total DESC;

/*11 all products that belong to categories with fewer than 10 products. */

/*12 Retrieve the top 3 best-selling products (by total quantity sold) */

SELECT 
    products.product_name, SUM(order_items.quantity) AS total
FROM
    products
        JOIN
    order_items ON products.product_id = order_items.product_id
GROUP BY products.product_name
ORDER BY total DESC
LIMIT 3;

/*13 the total revenue generated by each store. */

SELECT 
    stores.store_name,
    SUM(order_items.quantity * order_items.list_price * (1 - order_items.discount)) AS total_rev
FROM
    stores
        JOIN
    orders ON stores.store_id = orders.store_id
        JOIN
    order_items ON order_items.order_id = orders.order_id
GROUP BY stores.store_name;


/*14 all customers who have ordered from more than one store. */

SELECT 
    c.first_name, COUNT(DISTINCT (o.order_id)) AS total
FROM
    customers c
        JOIN
    orders o ON c.customer_id = o.customer_id
        JOIN
    stores s ON o.store_id = s.store_id
GROUP BY c.first_name
HAVING total > 1;

/*15  all orders where the quantity of items ordered exceeds the available stock quantity. */

SELECT 
    o.order_id,
    oi.item_id,
    oi.product_id,
    oi.quantity AS ordered_quantity,
    st.quantity AS available_quantity
FROM
    orders o
        INNER JOIN
    order_items oi ON o.order_id = oi.order_id
        INNER JOIN
    stocks st ON oi.product_id = st.product_id
WHERE
    oi.quantity > st.quantity;

/*16  the staff members who have processed the highest number of orders. */
SELECT 
    staffs.staff_id,
    staffs.first_name,
    COUNT(orders.order_id) AS count
FROM
    orders
        JOIN
    staffs ON orders.staff_id = staffs.staff_id
GROUP BY staffs.staff_id , staffs.first_name
ORDER BY count DESC;

/*17  the categories where the average product price is above $500 */

SELECT 
    c.category_name
FROM
    products p
        JOIN
    categories c ON p.category_id = c.category_id
GROUP BY c.category_name
HAVING AVG(p.list_price) > 500;
 
 /*18  the total number of orders placed in each month of the current year. */ 
SELECT 
    MONTHNAME(order_date), COUNT(*) AS total
FROM
    orders
WHERE
    YEAR(order_date) = 2016
GROUP BY MONTHNAME(order_date)
ORDER BY total DESC;


 /*19 all products that have never been ordered. */
 
SELECT 
    p.product_id, p.product_name
FROM
    products p
        LEFT JOIN
    order_items oi ON p.product_id = oi.product_id
WHERE
    oi.order_id IS NULL;

/*20 the stores where the total revenue is below the average revenue across all stores. */

with store as
(select 
	s.store_id,
    s.store_name,
    sum(ot.quantity * ot.list_price * (1-ot.discount)) as total_rev,
    avg(sum(ot.quantity * ot.list_price * (1-ot.discount)))  over() as avg_rev
    
from stores s
join orders o on s.store_id = o.store_id
join order_items ot on ot.order_id = o.order_id
group by s.store_id,s.store_name
) 

select store_id , store_name, total_rev
from store
where total_rev < avg_rev;


/*21   all customers who have never placed an order.*/
select * from customers c
left join orders o on c.customer_id = o.customer_id
where o.customer_id is null;

/*22  the number of products in each category. */

select c.category_name,count(p.product_id) as total from products p
left join categories c on p.category_id = c.category_id
group by c.category_name;


/*23 the details of orders that have been shipped more than 10 days after the order date.*/
SELECT 
    order_id,
    order_date,
    shipped_date,
    DATEDIFF(shipped_date, order_date)
FROM
    orders
WHERE
    DATEDIFF(shipped_date, order_date) > 2;


/*23 the products along with the total quantity ordered, sorted by the most ordered product. */

SELECT 
    p.product_name, SUM(o.quantity) AS total
FROM
    order_items o
        JOIN
    products p ON o.product_id = p.product_id
GROUP BY p.product_name;

/*24 the average number of items per order.*/

SELECT 
    AVG(items)
FROM
    (SELECT 
        COUNT(*) AS items
    FROM
        order_items
    GROUP BY order_id) t;

/*25 the stores that have at least one product with a stock quantity below 10 */

SELECT DISTINCT
    stores.store_id, stores.store_name
FROM
    stores
        JOIN
    stocks ON stores.store_id = stocks.store_id
WHERE
    stocks.quantity < 10;

/*26 the customer information along with their most recent order date. */

SELECT 
    CONCAT(c.first_name, ' ', c.last_name) AS f_name,
    MAX(o.order_date) AS last_order_day
FROM
    customers c
        JOIN
    orders o ON c.customer_id = o.customer_id
GROUP BY f_name;

/*27  the total revenue generated by each store. */

SELECT 
    stores.store_name,
    SUM(ot.quantity * ot.list_price * (1 - ot.discount)) AS total_rev
FROM
    stores
        JOIN
    orders ON stores.store_id = orders.store_id
        JOIN
    order_items ot ON ot.order_id = orders.order_id
GROUP BY stores.store_name;


/*28  the most popular brand based on the number of products sold.*/ 

SELECT 
    b.brand_name, SUM(ot.quantity) AS total
FROM
    brands b
        JOIN
    products p ON b.brand_id = p.brand_id
        JOIN
    order_items ot ON ot.product_id = p.product_id
GROUP BY b.brand_name
ORDER BY total DESC
LIMIT 5;

/*29 all the products along with their current stock in each store. */

SELECT 
    p.product_name, s.quantity, st.store_name
FROM
    products p
        JOIN
    stocks s ON p.product_id = s.product_id
        JOIN
    stores st ON st.store_id = s.store_id;

/*30 all orders with a column showing the order status as
 'Delayed' if the shipped date is after the required date.*/
 
 select order_id,order_date,shipped_date,
	case 
		when shipped_date > required_date then 'Delayed'
        else 'on time'
    end as shipping_status
 
 from orders ;
 
 /*31 all customers with a column indicating whether they have placed an order or not. */
 
 select c.customer_id,concat(c.first_name,' ',c.last_name) as f_name, 
 case
	when o.order_id is not null then 'yes'
    else 'no'
 end as order_placed
 from customers c
 left join orders o on c.customer_id= o.customer_id;
 
 /*32  all products with a column indicating if the list price is 
 above or below the average list price.*/
 
select product_name,list_price,
case
	when (select avg(list_price) from products) > list_price then 'below average'
    else 'above average'
end as price_category

 from products;
 /*33 all order items with a column 
 indicating if the discount is greater than 10%. */
 
 SELECT 
    order_items.order_id,
    products.product_name,
    CASE
        WHEN (order_items.discount * 100) < 10 THEN 'Low discount'
        ELSE 'High discount'
    END AS discount_category
FROM
    order_items
        JOIN
    products ON products.product_id = order_items.product_id;
 
 /*34 all products with a column showing 'In Stock' 
 if the stock quantity is greater than zero in any store.*/ 
 
 SELECT p.product_id, p.product_name,
       CASE
           WHEN EXISTS (SELECT 1 FROM stocks s WHERE s.product_id = p.product_id AND s.quantity > 0) THEN 'In Stock'
           ELSE 'Out of Stock'
       END AS stock_status
FROM products p;

/*35 all stores with a column indicating whether they are located 
in 'Urban' or 'Rural' areas based on the state.*/

SELECT 
    store_id,
    store_name,
    city,
    state,
    CASE
        WHEN state IN ('NY' , 'CA') THEN 'Urban'
        ELSE 'Rural'
    END AS area_type
FROM
    stores;

/*36 all customers with a column showing 'VIP' if they have placed more than 2 orders.*/

select 
	customer_id,concat(first_name,' ',last_name) as f_name,
    case
		when (select count(*) from orders where orders.customer_id = customers.customer_id) > 2 then 'Vip'
        else 'Regular'
	end as customer_type
from customers;

/*37 all products with a column indicating if they belong to 
a 'Premium' or 'Standard' brand based on brand name.*/

SELECT p.product_id, p.product_name, b.brand_name,
       CASE
           WHEN b.brand_name IN ('Electra', 'Trek') THEN 'Premium'
           ELSE 'Standard'
       END AS brand_category
FROM products p
JOIN brands b ON p.brand_id = b.brand_id;

/*38 all orders with a column showing 'Large' or 'Small' 
based on the total quantity of items. */

select o.order_id,sum(oi.quantity)as total_quantity,
	case
		when sum(oi.quantity) > 4 then 'Large'
        else 'Small'
	end as order_size
    
from orders o 
join order_items oi on o.order_id = oi.order_id
group by o.order_id; 

/*40 all orders with a column indicating 
whether the order has more than 4 different products.*/

SELECT 
    o.order_id,count(distinct(oi.product_id)) as product_count,
    case
		when count(distinct(oi.product_id)) > 4 then 'many'
        else 'Few Products'
	end as product_diversity
FROM
    order_items oi
        JOIN
    orders o ON oi.order_id = o.order_id
group by order_id;


/* 39 the average list price of products by category*/

 with avgpricecategory as (
 select category_id,round(avg(list_price),2) as avg_price from products
 group by category_id)

select c.category_name,avgpricecategory.avg_price from avgpricecategory
join categories c on c.category_id = avgpricecategory.category_id;

/*40  the top 3 customers by total spending*/

with customerspending as
(select o.customer_id,round(sum(ot.quantity *ot.list_price *(1-ot.discount)),2) as total_spends from order_items  ot
join orders o on o.order_id = ot.order_id
group by o.customer_id
)
select c.customer_id,
	   concat(c.first_name,' ',c.last_name) as full_name,
       cs.total_spends 
from customers c 
join customerspending cs on c.customer_id=cs.customer_id
order by cs.total_spends desc
limit 3;

/*41 the average quantity ordered for each products*/

with ProductAvgQuantity as 
(select product_id,
	    avg(quantity) as avg_quantity 
from order_items
group by product_id)

select p.product_name,
	   pag.avg_quantity 
from products p 
join ProductAvgQuantity  pag on p.product_id=pag.product_id;

/*42 the most recent order for each customer */
with CustomerLastOrder as 
(select customer_id,max(order_date) as last_order_date from orders
group by customer_id)

select c.customer_id,concat(c.first_name,' ',c.last_name) as customer_name , clo.last_order_date from customers c
join CustomerLastOrder clo on c.customer_id=clo.customer_id;

/*43 the products with their total quantity ordered and average list price*/

WITH ProductSummary AS (
    SELECT product_id, SUM(quantity) AS total_quantity, round(AVG(list_price),2) AS avg_price
    FROM order_items
    GROUP BY product_id
)
SELECT p.product_name, s.total_quantity, s.avg_price
FROM ProductSummary s
JOIN products p ON s.product_id = p.product_id;

/*44 the rank of each product based on the total sales amount. */

select p.product_id,p.product_name,
	round(sum(oi.quantity* oi.list_price * (1-oi.discount)),2) as total_spend,
	rank() over(order by sum(oi.quantity* oi.list_price * (1-oi.discount)) desc) as sales_rank
from products p 
	join order_items oi on p.product_id=oi.product_id
	group by p.product_id,p.product_name;

/*45  the cumulative total quantity ordered by each customer*/

SELECT o.order_id, o.customer_id, CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
       SUM(oi.quantity * oi.list_price * (1 - oi.discount)) AS order_amount,
       RANK() OVER (PARTITION BY o.customer_id ORDER BY SUM(oi.quantity * oi.list_price * (1 - oi.discount)) DESC) AS order_rank
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
JOIN customers c ON o.customer_id = c.customer_id
GROUP BY o.order_id, o.customer_id, customer_name;



